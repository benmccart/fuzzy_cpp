//  Copyright (c) 2017, Ben McCart
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.

#ifndef FUZZY__ELEMENT_HPP
#define FUZZY__ELEMENT_HPP

#include <cassert>

namespace fuzzy
{
	/// A basic_element is the fundemental building block upon which all other fuzzy constructs are based.
	template <class V, class M>
	class basic_element
	{
	public:
		typedef V value_type;
		typedef M membership_type;
		typedef basic_element<V, M> self_type;

		basic_element(value_type, membership_type = static_cast<membership_type>(0));
		basic_element(self_type const&);
		basic_element(self_type&&);
		~basic_element() {								}

		self_type& operator=(self_type const&);
		self_type& operator=(self_type&&);

		bool operator==(self_type const&) const;
		bool operator!=(self_type const&) const;
		bool operator<(self_type const&) const;

		membership_type const& membership() const { return membership_; }
		membership_type& membership() { return membership_; }
		void membership(membership_type m) { membership_ = m; }

		value_type const& value() const { return value_; }
		value_type& value() { return value_; }
		void value(value_type v) { value_ = v; }

	private:
		value_type value_;
		membership_type membership_;
	};


	template <class V, class M>
	basic_element<V, M>::basic_element(V value, M membership)
		: value_(value), membership_(membership)
	{
		assert(static_cast<M>(0) <= membership_ && membership_ <= static_cast<M>(1));
	}

	template <class V, class M>
	basic_element<V, M>::basic_element(self_type const &other)
		: value_(other.value_), membership_(other.membership_)
	{
		assert(static_cast<M>(0) <= membership_ && membership_ <= static_cast<M>(1));
	}

	template <class V, class M>
	basic_element<V, M>::basic_element(self_type&& other)
		: value_(std::move(other.value_)), membership_(std::move(other.membership_))
	{
		assert(static_cast<M>(0) <= membership_ && membership_ <= static_cast<M>(1));
	}

	template <class V, class M>
	basic_element<V,M>& basic_element<V,M>::operator=(basic_element<V,M> const &other)
	{
		assert(static_cast<M>(0) <= other.membership_ && other.membership_ <= static_cast<M>(1));
		value_ = other.value_;
		membership_ = other.membership_;
		return *this;
	}

	template <class V, class M>
	basic_element<V, M>& basic_element<V, M>::operator=(basic_element<V, M>&& other)
	{
		assert(static_cast<M>(0) <= other.membership_ && other.membership_ <= static_cast<M>(1));
		value_ = std::move(other.value_);
		membership_ = std::move(other.membership_);
		return *this;
	}

	template <class V, class M>
	bool basic_element<V, M>::operator==(basic_element<V, M> const &other) const
	{
		return (value_ == value_) && (membership_ == membership_);
	}

	template <class V, class M>
	bool basic_element<V, M>::operator!=(basic_element<V, M> const &other) const
	{
		return !(*this == other);
	}

	template <class V, class M>
	bool basic_element<V, M>::operator<(basic_element<V, M> const &other) const
	{
		return value_ < other.value_;
	}

	/** Convenience defintion for common use cases. */
	typedef basic_element<int, float> element;
}

#endif  // FUZZY__ELEMENT_HPP
