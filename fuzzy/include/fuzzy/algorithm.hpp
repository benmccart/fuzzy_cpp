//  Copyright (c) 2022, Ben McCart
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.

#define FUZZY_USE_TLS_DEF_OPERATOR // FIXME: Remove me!

#ifndef FUZZY_ALGORITHM_HPP
#define FUZZY_ALGORITHM_HPP

#include <cmath>
#include <concepts> 
#include <iterator>
#include <limits>
#include <stack>

#include <fuzzy/element.hpp>
#include <fuzzy/math.hpp>
#include <fuzzy/operator.hpp>
#include <fuzzy/set.hpp>
#include <fuzzy/traits.hpp>

namespace fuzzy
{
	namespace detail
	{

		struct trim
		{
			template <class V, class M, class Container>
			constexpr static void apply(fuzzy::basic_set<V, M, Container>& v)
			{
				constexpr M zero_m = static_cast<M>(0);
				if (v.size() < 3ull)
					return;

				auto ritr = cend(v) - 1ull;
				auto ritr_next = ritr - 1ull;
				for (; ritr->membership() == zero_m && ritr_next != cbegin(v) && ritr_next->membership() == zero_m; ritr = v.erase(ritr) - 1ull, ritr_next = ritr - 1ull) {}

				auto itr = cbegin(v);
				auto itr_next = itr + 1ull;
				for (; itr->membership() == zero_m && (cend(v) - itr_next) > 1ull && itr_next->membership() == zero_m; itr = v.erase(itr), itr_next = itr + 1ull) {}
			}
		};


		template <class Operation>
		requires fuzzy::tnorm_type<Operation> || fuzzy::tconorm_type<Operation>
		struct operation
		{
			template <class V, class M, class Container>
			[[nodiscard]] constexpr static fuzzy::basic_set<V, M, Container> apply(fuzzy::basic_set<V, M, Container> const& lhs, fuzzy::basic_set<V, M, Container> const& rhs)
			{
				using op_t = Operation;
				using set_type = fuzzy::basic_set<V, M, Container>;
				using element_type = typename set_type::element_type;

				auto lhs_itr = cbegin(lhs);
				auto lhs_end = cend(lhs);
				auto rhs_itr = cbegin(rhs);
				auto rhs_end = cend(rhs);

				set_type result;
				for (; lhs_itr != lhs_end || rhs_itr != rhs_end;)
				{
					if (lhs_itr != lhs_end && rhs_itr != rhs_end)
					{
						V lhs_value = lhs_itr->value();
						V rhs_value = rhs_itr->value();
						if (lhs_value < rhs_value)
						{
							M m = op_t::apply(lhs_itr->membership(), rhs.membership(lhs_value));
							result.insert(element_type{ lhs_value, m });
							++lhs_itr;
						}
						else if (rhs_value < lhs_value)
						{
							M m = op_t::apply(lhs.membership(rhs_value), rhs_itr->membership());
							result.insert(element_type{ rhs_value, m });
							++rhs_itr;
						}
						else
						{
							M m = op_t::apply(lhs_itr->membership(), rhs_itr->membership());
							result.insert(element_type{ lhs_value, m });
							++lhs_itr;
							++rhs_itr;
						}
					}
					else if (lhs_itr != lhs_end)
					{
						V lhs_value = lhs_itr->value();
						M m = op_t::apply(lhs_itr->membership(), rhs.membership(lhs_value));
						result.insert(element_type{ lhs_value, m });
						++lhs_itr;
					}
					else if (rhs_itr != rhs_end)
					{
						V rhs_value = rhs_itr->value();
						M m = op_t::apply(lhs.membership(rhs_value), rhs_itr->membership());
						result.insert(element_type{ rhs_value, m });
						++rhs_itr;
					}
				}

				trim::apply(result);
				return result;
			}
		};


		template <class VF, class V>
		concept ValueFunction = std::integral<V> && requires (V va, V vb, VF vf)
		{
			{ vf(va, vb) } -> std::same_as<V>;
		};

		template <class MF, class M>
		concept MembershipFunction = std::floating_point<M> && requires (M m, MF mf)
		{
			{ mf(m) } -> std::same_as<M>;
		};


		template <class V, class VF>
		requires ValueFunction<VF, V>
		V values(V a, V b, VF vf)
		{
			return vf(a, b);
		}

		/* Triangular conorm function object.**/
		template <typename M = float>
		requires std::floating_point<M>
		class tconorm_binder
		{
		public:
			using tconorm = tconorm_tag;
			using value_type = M;
			using func_ptr = M(*)(M x, M y);

			tconorm_binder() { func_ = [](M, M) { return std::numeric_limits<M>::quiet_NaN(); }; }
			tconorm_binder(tconorm_binder<M> const&) = delete;
			tconorm_binder(tconorm_binder<M>&&) = delete;
			tconorm_binder<M>& operator=(tconorm_binder<M> const&) = delete;
			tconorm_binder<M>& operator=(tconorm_binder<M>&&) = delete;

			/** binds to a specific tconorm type */
			template <typename T>
			requires tconorm_type<T>
			constexpr void bind(T) noexcept
			{
				func_ = [](M x, M y) -> M { return T::apply(x, y); };
			}

			[[nodiscard]] constexpr M apply(M x, M y) noexcept
			{
				validate_range<M>(x, y);
				return func_(x, y);
			}

		private:
			func_ptr func_ = nullptr;
		};

		/* Triangular conorm function object.**/
		template <class M = float>
		requires std::floating_point<M>
		class tnorm_binder
		{
		public:
			using tnorm = tnorm_tag;
			using func_ptr = M(*)(M x, M y);

			tnorm_binder() { func_ = [](M, M) { return std::numeric_limits<M>::quiet_NaN(); }; }
			tnorm_binder(tnorm_binder<M> const&) = delete;
			tnorm_binder(tnorm_binder<M>&&) = delete;
			tnorm_binder<M>& operator=(tnorm_binder<M> const&) = delete;
			tnorm_binder<M>& operator=(tnorm_binder<M>&&) = delete;

			/** binds to a specific tconorm type */
			template <class T>
			requires tnorm_type<T>
			constexpr void bind(T) noexcept
			{
				func_ = [](M x, M y) -> M { return T::apply(x, y); };
			}

			[[nodiscard]] constexpr M apply(M x, M y) noexcept
			{
				validate_range<M>(x, y);
				return func_(x, y);
			}

		private:
			func_ptr func_;
		};

#ifdef FUZZY_USE_TLS_DEF_OPERATOR
		template <class M>
		requires std::floating_point<M>
		thread_local tconorm_binder<M> *current_tconorm = nullptr;

		template <class M>
		requires std::floating_point<M>
		thread_local tnorm_binder<M> *current_tnorm = nullptr;
#endif

		template <class V, class M>
		requires std::integral<V> && std::floating_point<M>
		struct edge
		{
			basic_element<V, M> v0;
			basic_element<V, M> v1;
		};
	}


	/**
	* Version of std::set_intersection compatible with fuzzy set theory.
	* @param lhs The left hand side fuzzy set operand.
	* @param rhs The right hand side fuzzy set operand.
	* @return The intersection of the two fuzzy sets.
	*/
	template <class V, class M, class Operation = fuzzy::minimum<M>, class Container>
	requires std::integral<V> && std::floating_point<M> && tnorm_type<Operation>
	[[nodiscard]] constexpr fuzzy::basic_set<V, M, Container> set_intersection(fuzzy::basic_set<V, M, Container> const& lhs, fuzzy::basic_set<V, M, Container> const& rhs)
	{
		return fuzzy::detail::operation<Operation>::apply(lhs, rhs);
	}

	/**
	* Version of std::set_union compatible with fuzzy set theory.
	* @param lhs The left hand side fuzzy set operand.
	* @param rhs The right hand side fuzzy set operand.
	* @return The union of the two fuzzy sets.
	*/
	template <class V, class M, class Operation = fuzzy::maximum<M>, class Container>
	requires std::integral<V>&& std::floating_point<M>&& tconorm_type<Operation>
	[[nodiscard]] constexpr fuzzy::basic_set<V, M, Container> set_union(fuzzy::basic_set<V, M, Container> const& lhs, fuzzy::basic_set<V, M, Container> const& rhs)
	{
		return fuzzy::detail::operation<Operation>::apply(lhs, rhs);
	}

#ifdef FUZZY_USE_TLS_DEF_OPERATOR

	template <class T>
	requires tnorm_type<T> && std::floating_point<typename T::value_type>
	class use_tnorm_t
	{
	public:
		using value_type = typename T::value_type;

		use_tnorm_t() = delete;
		use_tnorm_t(use_tnorm_t<T> const&) = delete;
		use_tnorm_t(use_tnorm_t<T>&&) = delete;
		use_tnorm_t<T>& operator=(use_tnorm_t<T> const&) = delete;
		use_tnorm_t<T>& operator=(use_tnorm_t<T>&&) = delete;

		constexpr use_tnorm_t(T) noexcept
			: previous_(detail::current_tnorm<value_type>)
		{
			current_.bind(T{});
			detail::current_tnorm<value_type> = &current_;
		}

		constexpr ~use_tnorm_t() noexcept
		{
			assert(detail::current_tnorm<value_type> == &current_);
			detail::current_tnorm<value_type> = previous_;
		}

	private:
		detail::tnorm_binder<value_type> current_;
		detail::tnorm_binder<value_type> *previous_;
	};

	template<class T> use_tnorm_t(T) -> use_tnorm_t<T>;
	

	template <class T>
	requires tconorm_type<T>&& std::floating_point<typename T::value_type>
	class use_tconorm_t
	{
	public:
		using value_type = typename T::value_type;

		use_tconorm_t() = delete;
		use_tconorm_t(use_tconorm_t<T> const&) = delete;
		use_tconorm_t(use_tconorm_t<T>&&) = delete;
		use_tconorm_t<T>& operator=(use_tconorm_t<T> const&) = delete;
		use_tconorm_t<T>& operator=(use_tconorm_t<T>&&) = delete;

		constexpr use_tconorm_t(T) noexcept
			: previous_(detail::current_tconorm<value_type>)
		{
			current_.bind(T{});
			detail::current_tconorm<value_type> = &current_;
		}

		constexpr ~use_tconorm_t() noexcept
		{
			assert(detail::current_tconorm<value_type> == &current_);
			detail::current_tconorm<value_type> = previous_;
		}

	private:
		detail::tconorm_binder<value_type> current_;
		detail::tconorm_binder<value_type>* previous_;
	};

	template<class T> use_tconorm_t(T) -> use_tconorm_t<T>;





#endif

	/**
	* Intersects two fuzzy sets.
	* @param aset The lhs set to intersect.
	* @return The intersection of the sets.
	*/
	template <class V, class M, class Operation = fuzzy::maximum<M>, class Container>
	requires std::integral<V>&& std::floating_point<M>
	[[nodiscard]] constexpr fuzzy::basic_set<V, M, Container> operator&(fuzzy::basic_set<V, M, Container> const& lhs, fuzzy::basic_set<V, M, Container> const& rhs)
	{
		return set_intersection<V, M, Operation, Container>(lhs, rhs);
	}

	/**
	* Unions two fuzzy sets.
	* @param aset The lhs set to intersect.
	* @return The unions of the sets.
	*/
	template <class V, class M, class Operation = fuzzy::maximum<M>, class Container>
		requires std::integral<V>&& std::floating_point<M>
	[[nodiscard]] constexpr fuzzy::basic_set<V, M, Container> operator|(fuzzy::basic_set<V, M, Container> const& lhs, fuzzy::basic_set<V, M, Container> const& rhs)
	{
		return set_union<V, M, Operation, Container>(lhs, rhs);
	}

	/**
	* Complement of fuzzy set.
	* @param aset The set to complement.
	* @return The complement of the set.
	*/
	template <class V, class M, class Operation = fuzzy::maximum<M>, class Container>
	requires std::integral<V>&& std::floating_point<M>
	[[nodiscard]] constexpr fuzzy::basic_set<V, M, Container> set_complement(fuzzy::basic_set<V, M, Container> const& aset)
	{
		using set_type = fuzzy::basic_set<V, M, Container>;
		using element_type = typename set_type::element_type;
		set_type result;

		constexpr V v_min = std::numeric_limits<V>::lowest();
		constexpr V v_max = std::numeric_limits<V>::max();
		constexpr V v_offset = static_cast<V>(1);
		constexpr M m_max = static_cast<M>(1.0);
		constexpr M m_min = static_cast<M>(0.0);
		constexpr complement<M> comp;

		if (aset.empty())
		{
			result.insert(element_type{ v_min, m_max });
			result.insert(element_type{ v_max, m_max });
			return result;
		}

		M const m_front = comp.apply(aset.front().membership());
		if (m_front != m_min && aset.front().value() != v_min)
		{
			V const v_prefix = aset.front().value() - v_offset;
			if (v_prefix != v_min)
				result.insert(element_type{ v_min, m_max });

			if (m_front != m_min)
				result.insert(element_type{ v_prefix, m_max });
		}

		for (auto& element : aset)
		{
			result.insert(fuzzy::basic_element<V, M>{ element.value(), comp.apply(element.membership()) });
		}

		M const m_back = result.back().membership();
		if (m_back != m_min && aset.back().value() != v_max)
		{
			V const v_postfix = aset.back().value() + v_offset;
			if (v_postfix != v_max)
				result.insert(element_type{ v_max, m_max });

			if (m_back != m_min)
				result.insert(element_type{ v_postfix, m_max });
		}

		return result;
	}

	/**
	* Widens a fuzzy set.
	* @param aset The set to widen.
	* @return The widened set.
	*/
	template <class V, class M, class Operation = fuzzy::maximum<M>, class Container>
		requires std::integral<V>&& std::floating_point<M>
	[[nodiscard]] constexpr fuzzy::basic_set<V, M, Container> widen(fuzzy::basic_set<V, M, Container> const& aset)
	{
		using math::promote;
		using set_type = fuzzy::basic_set<V, M, Container>;
		using element_type = typename set_type::element_type;
		set_type result;

		constexpr V v_min = std::numeric_limits<V>::lowest();
		constexpr V v_max = std::numeric_limits<V>::max();
		constexpr M m_min = static_cast<M>(0.0);

		// Handle special cases of empty or 1 element.
		if (aset.empty())
		{
			return result;
		}
		if (aset.size() == 1ull)
		{
			element_type e = aset.front();
			e.membership(std::sqrt(e.membership()));
			result.insert(std::move(e));
		}

		auto widen_left = [](auto itr, auto itr_next, V vmin) -> element_type
		{
			assert(itr->membership() == m_min && itr_next->membership() != m_min);
			auto const delta = promote(itr_next->value()) - promote(itr->value());
			auto const max_delta = promote(itr->value()) - promote(vmin);
			if (delta > max_delta)
			{
				using pv_t = decltype(delta);
				using pv_element = basic_element<pv_t, M>;
				pv_element e0{ promote(itr->value()) - delta, m_min };
				pv_element e1{ promote(itr_next->value()), itr_next->membership() };
				M const membership = fuzzy::math::linear_interpolate<pv_t, M>(e0, promote(vmin), e1);
				return element_type{ vmin, membership };
			}
			else
			{
				assert((promote(itr->value()) - delta) >= promote(vmin));
				return element_type{ static_cast<V>(promote(itr->value()) - delta), m_min };
			}
		};

		auto widen_right = [](auto itr_last, auto itr, V vmax) -> element_type
		{
			assert(itr_last->membership() != m_min && itr->membership() == m_min);
			auto const delta = promote(itr->value()) - promote(itr_last->value());
			auto const max_delta = promote(vmax) - promote(itr->value());
			if (delta > max_delta)
			{
				using pv_t = decltype(delta);
				using pv_element = basic_element<pv_t, M>;
				pv_element e0{ promote(itr_last->value()), itr_last->membership() };
				pv_element e1{ promote(itr->value()) + delta, m_min };
				M const membership = math::linear_interpolate<pv_t,M>(e0, promote(vmax), e1);
				return element_type{ vmax, membership };
			}
			else
			{
				return element_type{ static_cast<V>(promote(itr->value()) + delta), m_min };
			}
		};

		auto intersect = [&](element_type l0, element_type l1, element_type r0, element_type r1)
		{
			assert(l1.value() > r0.value());
			M const ldy = l1.membership() - l0.membership();
			M const ldx = static_cast<M>(promote(l1.value()) - promote(l0.value()));
			M const lm = ldy / ldx; assert(lm < static_cast<M>(0));
			M const lb = l0.membership() - (lm * static_cast<M>(l0.value()));

			M const rdy = r1.membership() - r0.membership();
			M const rdx = static_cast<M>(promote(r1.value()) - promote(r0.value()));
			M const rm = rdy / rdx; assert(rm > static_cast<M>(0));
			M const rb = r1.membership() - (rm * static_cast<M>(r1.value()));

			M const value = static_cast<V>(std::round((rb - lb) / (lm - rm))); assert(r0 <= value && value <= l1);
			return static_cast<V>(std::round(value));
		};

		auto widen_left_min = [&](auto itr, auto itr_next)
		{
			auto itr_v0 = itr;
			for (; itr_v0 != begin(aset) && itr_v0->membership() == m_min; --itr_v0) {}
			if (itr_v0->membership() == m_min)
				return v_min;

			auto itr_v1 = itr_v0 + 1;
			auto const delta_right = promote(itr_v1->value()) - promote(itr_v0->value());
			auto const value_scan_right = promote(itr_v1->value()) + delta_right;
			auto const delta_left = promote(itr_next->value()) - promote(itr->value());
			auto const value_scan_left = promote(itr->value()) - delta_left;
			if (value_scan_right < value_scan_left)
				return static_cast<V>(value_scan_left);

			return intersect(
				*itr_v0,
				element_type{ static_cast<V>(value_scan_right), m_min },
				element_type{ static_cast<V>(value_scan_left), m_min },
				*itr_next);
		};

		auto widen_right_max = [&](auto itr_last, auto itr)
		{
			auto itr_v1 = itr;
			for (; itr_v1 != end(aset) && itr_v1->membership() == m_min; ++itr_v1) {}
			if (itr_v1 == end(aset) || itr_v1->membership() == m_min)
				return v_max;

			auto itr_v0 = itr_v1 - 1;
			auto const delta_left = promote(itr_v1->value()) - promote(itr_v0->value());
			auto const value_scan_left = promote(itr_v0->value()) - delta_left;
			auto const delta_right = promote(itr->value()) - promote(itr_last->value());
			auto const value_scan_right = promote(itr->value()) + delta_right;
			if (value_scan_right < value_scan_left)
				return static_cast<V>(value_scan_right);

			return intersect(
				*itr_last,
				element_type{ static_cast<V>(value_scan_right), m_min },
				element_type{ static_cast<V>(value_scan_left), m_min },
				*itr_v1);
		};

		// Handle first element special cases.
		auto itr_last = begin(aset);
		auto itr = itr_last + 1;
		assert(itr != end(aset));
		{
			M const lhm = itr_last->membership();
			M const rhm = itr->membership();
			if (lhm == m_min && rhm != m_min)
				result.insert(widen_left(itr_last, itr, v_min));
			else if (lhm != m_min && rhm != m_min)
				result.insert(element_type{ itr_last->value(), std::sqrt(itr_last->membership()) });
		}

		// Handle the general case.
		auto itr_next = itr + 1;
		for (; itr_next != end(aset); ++itr_last, ++itr, ++itr_next)
		{
			M const lm = itr_last->membership();
			M const m = itr->membership();
			M const nm = itr_next->membership();

			if (m != m_min)
			{
				// Default, take the square root.
				result.insert(element_type{ itr->value(), std::sqrt(itr->membership()) });
			}
			else if (lm != m_min && nm != m_min)
			{
				// Either widen_left() / or widen_right() should work just fine here.
				V const vmax = widen_right_max(itr_last, itr);
				result.insert(widen_right(itr_last, itr, vmax));
			}
			else if (nm != m_min)
			{
				V const vmin = widen_left_min(itr, itr_next);
				result.insert(widen_left(itr, itr_next, vmin));
			}
			else if (lm != m_min)
			{
				V const vmax = widen_right_max(itr_last, itr);
				result.insert(widen_right(itr_last, itr, vmax));
			}
			// else we don't care because we have at least three zero membership points in a row, skip this one in the middle.
		}

		// Handle last element special case.
		{
			M const lhm = itr_last->membership();
			M const rhm = itr->membership();
			if (lhm != m_min && rhm == m_min)
				result.insert(widen_right(itr_last, itr, v_max));
			else if (lhm != m_min && rhm != m_min)
				result.insert(element_type{ itr->value(), std::sqrt(itr->membership()) });
		}

		return result;
	}

	/**
	* Complement of fuzzy set.
	* @param aset The set to complement.
	* @return The complement of the set.
	*/
	template <class V, class M, class Operation = fuzzy::maximum<M>, class Container>
	requires std::integral<V>&& std::floating_point<M>
	[[nodiscard]] constexpr fuzzy::basic_set<V, M, Container> operator~(fuzzy::basic_set<V, M, Container> const& aset)
	{
		return set_complement<V,M,Operation, Container>(aset);
	}


}

#endif // FUZZY_ALGORITHM_HPP