//  Copyright (c) 2025, Ben McCart
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.

#ifndef FUZZY_SCALED_MAPPING_HPP
#define FUZZY_SCALED_MAPPING_HPP

#include <numeric>

#include <fuzzy/algorithm.hpp>
#include <fuzzy/concepts.hpp>
#include <fuzzy/consequent.hpp>
#include <fuzzy/element.hpp>
#include <fuzzy/scaled_antecedent.hpp>
#include <fuzzy/set.hpp>
#include <fuzzy/traits.hpp>

namespace fuzzy
{

	template <template <typename> class Tnorm, class V, class M, template <typename> class AggregatorFunc, template <typename T, typename Alloc = std::allocator<T>> class Container = std::vector>
	constexpr void scaled_mapping(fuzzy::scaled_antecedent<V, M, Container> const& antecedent, fuzzy::consequent<V, M, AggregatorFunc, Container>& consequent) // ??
	{
		using set_t = basic_set<V,M,Container>;
		auto const &scaled_src = antecedent.set();
		set_t const& dst = consequent.target();
		if (scaled_src.empty() || dst.empty())
			return; // Nothing more to do if either are empty.

		// Project the scaled antecedent.
		M const min_v = dst.front().membership();
		M const max_v = dst.back().membership();
		M const delta_v = max_v - min_v;
		set_t projected_src{ dst.get_allocator() };
		// FIXME: reserve projected_src.
		for (auto const& ele : scaled_src)
		{
			M const scaled_v = min_v + (delta_v * ele.value());
			V const rounded_v = static_cast<V>(std::round(scaled_v));
			projected_src.insert(rounded_v);
		}

		set_t result = set_intersection<V,M,Container,Tnorm>(projected_src, dst);
		consequent.aggregator().aggregate(result);
	}
}





#endif // FUZZY_SCALED_MAPPING_HPP