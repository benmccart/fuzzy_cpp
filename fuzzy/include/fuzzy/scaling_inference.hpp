//  Copyright (c) 2022, Ben McCart
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.

#ifndef FUZZY_SCALING_INFERENCE_HPP
#define FUZZY_SCALING_INFERENCE_HPP

namespace fuzzy
{
	/**
	* A mapping rule uses a relation to map a supplied fuzzy input to a mapped fuzzy output.  Abstractly it is a functional
	* mapping from the domain to the range of the related fuzzy relation.
	*/
	template <class V, class M, class Container = std::vector<fuzzy::basic_element<V, M>>, class Tnorm = fuzzy::minimum<M> >
		requires std::integral<V>&& std::floating_point<M>&& tnorm_type<Tnorm>
	class scaling_inference
	{
	public:
		using set_type = basic_set<V,M,Container>;
		using element_type = typename set_type::element_type;

		scaling_inference() = delete;
		constexpr scaling_inference(set_type const&);
		constexpr scaling_inference(set_type const&, Tnorm);


		constexpr set_type apply(V, set_type const&) const;
	private:

		set_type const *antecedent_;
	};


	/** Deduction guide to help construct the mapping_rule without having to explicitly specify the Tnorm or container parameters explicity. */
	template <class V, class M, class Container = std::vector<basic_element<V, M>>, class Tnorm = fuzzy::minimum<M>>
	scaling_inference(basic_set<V, M, Container> set, Tnorm tnorm) -> scaling_inference<V, M, Container, Tnorm>;


	/**
	* Constructs a scaling inference rule using the provided set.
	* @param ant The antecedent set to use in scaling the inference rule.
	*/
	template <class V, class M, class Container, class Tnorm>
	requires std::integral<V> && std::floating_point<M> && tnorm_type<Tnorm>
	constexpr scaling_inference<V, M, Container, Tnorm>::scaling_inference(set_type const &ant)
		: antecedent_(&ant)
	{}

	/**
	* Constructs a scaling inference rule using the provided set.
	* @param ant The antecedent set to use in scaling the inference rule.
	*/
	template <class V, class M, class Container, class Tnorm>
		requires std::integral<V> && std::floating_point<M> && tnorm_type<Tnorm>
	constexpr scaling_inference<V, M, Container, Tnorm>::scaling_inference(set_type const &ant, Tnorm)
		: antecedent_(&ant)
	{}

	/**
	* Scales the crisp input to a fuzzy output using the antecedent this inference rule was constructed with.
	* @param value The crisp input to scale.
	* @param consequent The inferred fuzzy output to scale to.
	* @return The fuzzy scaled inference.
	*/
	template <class V, class M, class Container, class Tnorm>
		requires std::integral<V> && std::floating_point<M> && tnorm_type<Tnorm>
	constexpr typename scaling_inference<V, M, Container, Tnorm>::set_type scaling_inference<V, M, Container, Tnorm>::apply(V value, set_type const& consequent) const
	{
		using math::promote;

		// Check for special cases first.
		set_type result;
		if (antecedent_->empty())
			return result;
		
		if (consequent.empty())
			return result;

		if (value > antecedent_->back() || antecedent_->back() < value)
			return result;

		M const domain = static_cast<M>(antecedent_->back().value() - antecedent_->front().value());
		M const domain_scale = static_cast<M>(value - antecedent_->front().value()) / domain;
		V const rmin = consequent.front().value();
		V const rmax = consequent.back().value();
		M const range = static_cast<M>(rmax - rmin);
		V const range_value = std::clamp(rmin + static_cast<V>(std::round(domain_scale * range)), rmin, rmax);
		M const range_membership = Tnorm::apply(antecedent_->membership(value), consequent.membership(range_value));
		result.insert(element_type{ range_value, range_membership });
		result.insert(element_type{ rmin, static_cast<M>(0) });
		result.insert(element_type{ rmax, static_cast<M>(0) });
		detail::simplify_impl::apply(result);

		return result;
	}

}

#endif