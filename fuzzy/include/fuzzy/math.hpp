//  Copyright (c) 2022, Ben McCart
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.

#ifndef FUZZY_MATH_HPP
#define FUZZY_MATH_HPP

#include <cassert>
#include <fuzzy/element.hpp>

namespace fuzzy { namespace math 
{
	/**
	* Used for unsigned integer promotion where differences (max value - min value) in set values can result in
	* exceeding the total range/ of the underlying type.
	*/
	template <class V>
	requires std::integral<V>
	constexpr auto promote(V v)
	{
		if constexpr (std::is_floating_point_v<V> || std::is_unsigned_v<V>)
			return v;
		else if constexpr (sizeof(int) > sizeof(V))
			return static_cast<int>(v);
		else if constexpr (sizeof(long) > sizeof(V))
			return static_cast<long>(v);
		else if constexpr (sizeof(long long) > sizeof(V))
			return static_cast<long long>(v);
		else
			return v;
	}

	/**
	* Strict linear interpolation based on line segment from two points at the point 'key', which must be 
	* in in the range [lhs, rhs].
	* @param lhs Element with lower value.
	* @param key The value at which to interpolate a membership value.
	* @param rhs Element with greater value.
	* @return The linear interpolated membership.
	*/
	template <class V, class M>
	requires fuzzy::numeric<V> && std::floating_point<M>
	constexpr M linear_interpolate(basic_element<V, M> lhs, V key, basic_element<V, M> rhs) noexcept
	{
		M dy = rhs.membership() - lhs.membership();
		M dx = static_cast<M>(promote(rhs.value()) - promote(lhs.value()));
		M x_offset = static_cast<M>(promote(key) - promote(lhs.value()));
		M ratio = x_offset / dx;
		return lhs.membership() + (ratio * dy);
	}

	template <class V, class M>
	requires fuzzy::numeric<V> && std::floating_point<M>
	struct basic_segment
	{
		using element_t = basic_element<V, M>;
		element_t v0;
		element_t v1;
	};

	template <class V, class M>
	requires fuzzy::numeric<V> && std::floating_point<M>
	constexpr basic_element<V, M> intersection(basic_segment<V, M> const& s0, basic_segment<V, M> const& s1)
	{
		using element_t = basic_element<V, M>;
		assert(s0.v0.value() < s0.v1.value());
		assert(s1.v0.value() < s1.v1.value());

		M const s0_deltax = static_cast<M>(s0.v1.value() - s0.v0.value());
		M const s0_deltay = s0.v1.membership() - s0.v0.membership();
		M const s1_deltax = static_cast<M>(s1.v1.value() - s1.v0.value());
		M const s1_deltay = s1.v1.membership() - s1.v0.membership();
		
		M const s = (-s0_deltay * static_cast<M>(s0.v0.value() - s1.v0.value()) + s0_deltax * (s0.v0.membership() - s1.v0.membership())) / (-s1_deltax * s0_deltay + s0_deltax * s1_deltay);
		M const t = (s1_deltax * (s0.v0.membership() - s1.v0.membership()) - s1_deltay * static_cast<M>(s0.v0.value() - s1.v0.value())) / (-s1_deltax * s0_deltay + s0_deltax * s1_deltay);
		if (s >= 0 && s <= 1 && t >= 0 && t <= 1)
		{
			V const v = s0.v0.value() + std::round(t * s0_deltax);
			if ((s0.v0.value() <= v && v <= s0.v1.value()) && (s1.v0.value() <= v && v <= s1.v1.value()))
			{
				M const m = linear_interpolate(s0.v0, v, s0.v1);
				return element_t{ v, m };
			}
		}

		return element_t{ std::numeric_limits<V>::max(), std::numeric_limits<M>::quiet_NaN() };
	}
}}


#endif // FUZZY_MATH_HPP