//  Copyright (c) 2025, Ben McCart
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
#ifndef FUZZY_CONCEPTS_HPP
#define FUZZY_CONCEPTS_HPP

//#include <fuzzy/traits.hpp>
#include <concepts>
#include <vector>

// FIXME: Move concepts out of traits & here and put it in a concepts file.

namespace fuzzy
{
	struct tnorm_tag {};
	struct tconorm_tag {};

	template <class T>
	concept tnorm_typenames = requires (T)
	{
		typename T::tnorm;
		typename T::value_type;
	};

	template <class T>
	concept tnorm_type = tnorm_typenames<T> && std::is_same_v<typename T::tnorm, tnorm_tag>&& std::is_floating_point_v<typename T::value_type>&& requires (T)
	{
		T::apply(static_cast<typename T::value_type>(0), static_cast<typename T::value_type>(0));
	};

	template <class T>
	concept tconorm_typenames = requires (T)
	{
		typename T::tconorm;
		typename T::value_type;
	};

	template <class T>
	concept tconorm_type = tconorm_typenames<T> && std::is_same_v<typename T::tconorm, tconorm_tag>&& std::is_floating_point_v<typename T::value_type>&& requires (T)
	{
		T::apply(static_cast<typename T::value_type>(0), static_cast<typename T::value_type>(0));
	};

	template <typename T>
	concept numeric = std::integral<T> || std::floating_point<T>;

	template <class VF, class V>
	concept ValueFunction = fuzzy::numeric<V> && requires (V va, V vb, VF vf)
	{
		{ vf(va, vb) } -> std::same_as<V>;
	};

	template <class MF, class M>
	concept MembershipFunction = std::floating_point<M> && requires (M m, MF mf)
	{
		{ mf(m) } -> std::same_as<M>;
	};
}
#endif // FUZZY_CONCEPTS_HPP