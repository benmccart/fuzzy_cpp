//  Copyright (c) 2025, Ben McCart
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.

#include <cstdint>
#include <memory>

#include <fuzzy/fwd.hpp>
#include <fuzzy/set.hpp>
#include <fuzzy/traits.hpp>


#ifndef FUZZY_SCALED_ANTECEDENT_HPP
#define FUZZY_SCALED_ANTECEDENT_HPP

namespace fuzzy
{
	/**
	* Used for determining the value type.
	*/
	template <class V>
	requires fuzzy::numeric<V>
	constexpr auto scaled_value_type(V v)
	{
		if constexpr (std::is_floating_point_v<V>)
			return v;
		else if constexpr (sizeof(int) > sizeof(V))
			return static_cast<int>(v);
		else if constexpr (sizeof(long) > sizeof(V))
			return static_cast<long>(v);
		else if constexpr (sizeof(long long) > sizeof(V))
			return static_cast<long long>(v);
		else
			return v;
	}

	/**
	 * @brief Represents a scaled application of a fuzzy value to a fuzzy variable.
	 * @tparam V Fuzzy value type.
	 * @tparam M Fuzzy membership type.
	 * @tparam Container Container type to use for basic_set.
	*/
	template <class V, class M, template <typename T, typename Alloc = std::allocator<T>> class Container, class Allocator>
	requires fuzzy::numeric<V> && std::floating_point<M>
	class scaled_antecedent
	{
	public:
		using container_type = Container<fuzzy::basic_element<V,M>>;
		
		using key_type = typename fuzzy::float_value_t<V>::value;
		using key_alloc_type = typename std::allocator_traits<Allocator>::template rebind_alloc<fuzzy::basic_element<key_type, M>>;
		using set_type = fuzzy::basic_set<key_type, M, Container, key_alloc_type>;
		using self_type = scaled_antecedent<V, M, Container, Allocator>;
		using membership_type = M;
		using size_type = typename container_type::size_type;

		constexpr explicit scaled_antecedent(self_type const&) = default;
		constexpr explicit scaled_antecedent(self_type&&) noexcept = default;

		constexpr self_type& operator=(self_type const&) = default;
		constexpr self_type& operator=(self_type&&) noexcept = default;

		constexpr set_type& set() noexcept             { return set_; }
		constexpr set_type const& set() const noexcept { return set_; }

	private:

		constexpr scaled_antecedent() {}

		/**
		 * @brief Ctor.
		 * @param set The scaled fuzzy set to construct things from.
		*/
		constexpr explicit scaled_antecedent(set_type&& set)
			: set_(std::move(set)) {}

		template <template <typename> class Tnorm, class V2, class M2, template <typename T, typename Alloc2 = std::allocator<T>> class Container2, class Allocator2>
		requires fuzzy::numeric<V2>&& std::floating_point<M2>&& fuzzy::tnorm_type<Tnorm<M2>>
		friend constexpr scaled_antecedent<V2, M2, Container2, Allocator2> is(fuzzy::basic_set<V2, M2, Container2, Allocator2> const&, fuzzy::basic_set<V2, M2, Container2, Allocator2> const&);

		set_type set_;
	};
}
#endif // FUZZY_SCALED_ANTECEDENT_HPP