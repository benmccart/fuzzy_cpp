//  Copyright (c) 2022, Ben McCart
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.

#include <cstdint>
#include <memory>

#include <fuzzy/algorithm.hpp>
#include <fuzzy/fwd.hpp>
#include <fuzzy/set.hpp>
#include <fuzzy/traits.hpp>


#ifndef FUZZY_SCALED_ANTECEDENT_HPP
#define FUZZY_SCALED_ANTECEDENT_HPP

namespace fuzzy
{




	/**
	* Used for determining the value type.
	*/
	template <class V>
	requires fuzzy::numeric<V>
	constexpr auto scaled_value_type(V v)
	{
		if constexpr (std::is_floating_point_v<V>)
			return v;
		else if constexpr (sizeof(int) > sizeof(V))
			return static_cast<int>(v);
		else if constexpr (sizeof(long) > sizeof(V))
			return static_cast<long>(v);
		else if constexpr (sizeof(long long) > sizeof(V))
			return static_cast<long long>(v);
		else
			return v;
	}

	/**
	 * @brief Represents a scaled application of a fuzzy value to a fuzzy variable.
	 * @tparam V Fuzzy value type.
	 * @tparam M Fuzzy membership type.
	 * @tparam Container Container type to use for basic_set.
	*/
	template <class V, class M, template <typename T, typename Alloc = std::allocator<T>> class Container>
	requires fuzzy::numeric<V> && std::floating_point<M>
	class scaled_antecedent
	{
	public:
		using container_type = Container<fuzzy::basic_element<V,M>>;
		
		//using value_type = float_value_t<V>::value;
		using key_type = typename fuzzy::float_value_t<V>::value;
		//using inner_container_type = Container<fuzzy::basic_element<key_type, M>>;
		using set_type = fuzzy::basic_set<key_type, M, Container>;
		using self_type = scaled_antecedent<V, M, Container>;
		
		//using element_type = basic_element<V, M>;
		using membership_type = M;
		//using value_type = element_type;
		using size_type = typename container_type::size_type;
		//using difference_type = typename container_type::difference_type;
		//using key_compare = std::less<key_type>;
		//using value_compare = std::less<element_type>;
		//using allocator_type = typename container_type::allocator_type;
		//using reference = element_type&;
		//using const_reference = element_type const&;
		//using pointer = typename container_type::pointer;
		//using const_pointer = typename container_type::const_pointer;
		//using iterator = typename container_type::iterator;
		//using const_iterator = typename container_type::const_iterator;
		//using reverse_iterator = typename container_type::reverse_iterator;
		//using const_reverse_iterator = typename container_type::const_reverse_iterator;

		constexpr explicit scaled_antecedent(self_type const&) = default;
		constexpr explicit scaled_antecedent(self_type&&) noexcept = default;

		constexpr self_type& operator=(self_type const&) = default;
		constexpr self_type& operator=(self_type&&) noexcept = default;

		constexpr set_type& set() noexcept             { return set_; }
		constexpr set_type const& set() const noexcept { return set_; }


	private:
		/**
		 * @brief Ctor.
		 * @param set The scaled fuzzy set to construct things from.
		*/
		constexpr explicit scaled_antecedent(set_type&& set)
			: set_(std::move(set))
		{

		}

		constexpr scaled_antecedent() {}

		template <template <typename> class Tnorm, template <typename T, typename Alloc2 = std::allocator<T>> class Container2, class V2, class M2>
		requires fuzzy::numeric<V2>&& std::floating_point<M2>&& fuzzy::tnorm_type<Tnorm<M2>>
		friend constexpr scaled_antecedent<V2, M2, Container2> is(fuzzy::basic_set<V2, M2, Container2> const&, fuzzy::basic_set<V2, M2, Container2> const&);

		set_type set_;
	};


	/**
	 * @brief Applies the fuzzy value to the fuzzy variable.  i.e. is(tempurature, hot)
	 * @tparam M The fuzzy element membership type.
	 * @tparam Tnorm The T-norm to use in the application.
	 * @tparam Container The container type to use for the fuzzy basic_set.
	 * @tparam V The fuzzy element value type.
	 * @param value The fuzzy value to apply.
	 * @param variable The fuzzy variable to apply the value against.
	 * @return A scaled application of a fuzzy value to a fuzzy variable.
	*/
	template <template<typename> class Tnorm = fuzzy::minimum, template <typename T, typename Alloc = std::allocator<T>> class Container, class V, class M>
	requires fuzzy::numeric<V> && std::floating_point<M> && fuzzy::tnorm_type<Tnorm<M>>
	constexpr scaled_antecedent<V, M, Container> is(fuzzy::basic_set<V, M, Container> const& value, fuzzy::basic_set<V, M, Container> const& variable)
	{
		using key_type = typename fuzzy::float_value_t<V>::value;
		//using outer_container_t = Container<fuzzy::basic_element<V,M>>;
		//using inner_container_t = Container<fuzzy::basic_element<key_type,M>>;

		if (variable.empty())
			return scaled_antecedent<V, M, Container>{ };

		key_type const d0 = static_cast<key_type>(variable.front().value());
		key_type const d1 = static_cast<key_type>(variable.back().value());
		key_type const domain_ratio = static_cast<key_type>(1) / (d1 - d0);
		fuzzy::basic_set<V, M, Container> const set = fuzzy::set_intersection<V, M, Container, Tnorm>(value, variable);
		fuzzy::basic_set<key_type, M, Container> scaled_set;
		for (fuzzy::basic_element<V, M> const& e : set)
		{
			key_type const offset = static_cast<key_type>(e.value()) - d0;
			key_type const scaled_value = offset * domain_ratio;
			scaled_set.insert(fuzzy::basic_element<key_type, M>{ scaled_value, e.membership() });
		}

		return scaled_antecedent<V, M, Container>{ std::move(scaled_set) };
	}







}
#endif // FUZZY_SCALED_ANTECEDENT_HPP