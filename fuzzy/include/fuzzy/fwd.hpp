//  Copyright (c) 2025, Ben McCart
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
#ifndef FUZZY_FWD_HPP
#define FUZZY_FWD_HPP

#include <memory>
#include <vector>


#include <fuzzy/concepts.hpp>
#include <fuzzy/element.hpp>

namespace fuzzy
{
	template <typename M>
	requires std::floating_point<M>
	struct algabraic_product;

	template <typename M>
	requires std::floating_point<M>
	struct algabraic_sum;
	
	template <typename M>
	requires std::floating_point<M>
	struct bounded_difference;

	template <typename M>
	requires std::floating_point<M>
	struct bounded_sum;

	template <typename M>
	requires std::floating_point<M>
	struct drastic_product;

	template <typename M>
	requires std::floating_point<M>
	struct drastic_sum;

	template <typename M>
	requires std::floating_point<M>
	struct einstein_product;

	template <typename M>
	requires std::floating_point<M>
	struct einstein_sum;

	template <typename M>
	requires std::floating_point<M>
	struct hamacher_product;

	template <typename M>
	requires std::floating_point<M>
	struct hamacher_sum;
	
	template <typename M>
	requires std::floating_point<M>
	struct minimum;

	template <typename M>
	requires std::floating_point<M>
	struct maximum;

	template <class V, class M, template <typename T, typename Alloc = std::allocator<T>> class Container = std::vector, class Allocator = std::allocator<fuzzy::basic_element<V,M>>>
	requires fuzzy::numeric<V>&& std::floating_point<M>
	class basic_set;

	template <class V, class M, template <typename T, typename Alloc = std::allocator<T>> class Container>
	requires fuzzy::numeric<V>&& std::floating_point<M>
	class scaled_antecedent;

	template <template <typename> class Tnorm, template <typename T, typename Alloc = std::allocator<T>> class Container, class Allocator, class V, class M>
	requires fuzzy::numeric<V>&& std::floating_point<M>&& fuzzy::tnorm_type<Tnorm<M>>
	constexpr scaled_antecedent<V, M, Container> is(fuzzy::basic_set<V, M, Container, Allocator> const&, fuzzy::basic_set<V, M, Container, Allocator> const&);

	template <class V, class M, template <typename> class AggregatorFunc, template <typename T, typename Alloc = std::allocator<T>> class Container = std::vector>
	requires fuzzy::numeric<V>&& std::floating_point<M>
	class result_aggregator;
}
#endif // FUZZY_FWD_HPP