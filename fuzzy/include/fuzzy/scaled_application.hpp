//  Copyright (c) 2022, Ben McCart
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.

#ifndef FUZZY_SCALED_APPLICATION_HPP
#define FUZZY_SCALED_APPLICATION_HPP

namespace fuzzzy
{

	template <class V, class M, class Container = std::vector<basic_element<V, M>>>
	requires fuzzy::numeric<V> && std::floating_point<M>
	class scaled_application
	{
	public:
		using container_type = Container;
		using set_type = basic_set<V, M, Container>;
		using self_type = linear_application<V, M, Container>;
		using key_type = V;
		using element_type = basic_element<V, M>;
		using membership_type = M;
		using value_type = element_type;
		using size_type = typename container_type::size_type;
		//using difference_type = typename container_type::difference_type;
		//using key_compare = std::less<key_type>;
		//using value_compare = std::less<element_type>;
		//using allocator_type = typename container_type::allocator_type;
		//using reference = element_type&;
		//using const_reference = element_type const&;
		//using pointer = typename container_type::pointer;
		//using const_pointer = typename container_type::const_pointer;
		//using iterator = typename container_type::iterator;
		//using const_iterator = typename container_type::const_iterator;
		//using reverse_iterator = typename container_type::reverse_iterator;
		//using const_reverse_iterator = typename container_type::const_reverse_iterator;


	private:
		constexpr explicit scaled_application(set_type&&);





	};





}
#endif // FUZZY_SCALED_APPLICATION_HPP