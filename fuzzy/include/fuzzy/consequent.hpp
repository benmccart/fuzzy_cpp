//  Copyright (c) 2022, Ben McCart
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.

#include <fuzzy/algorithm.hpp>
#include <fuzzy/operator.hpp>
#include <fuzzy/set.hpp>

#ifndef FUZZY_CONSEQUENT_HPP
#define FUZZY_CONSEQUENT_HPP

namespace fuzzy
{

	template <class Tconorm>
	requires tconorm_type<Tconorm>
	struct Tconorm_converter
	{
		using membership_type = typename Tconorm::value_type;

		constexpr Tconorm_converter() = default;
		constexpr Tconorm_converter(Tconorm) {}
		[[nodiscard]] constexpr membership_type operator()(membership_type a, membership_type b) const noexcept
		{
			return Tconorm::apply(a, b);
		}
	};

	template <class Tconorm>
	Tconorm_converter(Tconorm) -> Tconorm_converter<Tconorm>;


	/** 
	* Models the fuzzy consequent of a fuzzy antecedant, namely a fuzzy mapping_rule.	
	*/
	template <class V, class M, template <typename T, typename Alloc = std::allocator<T>> class Container = std::vector, class AggregatorFunc = Tconorm_converter<fuzzy::maximum<M>>>
	requires fuzzy::numeric<V> && std::floating_point<M>
	class consequent
	{
	public:
		using set_type = basic_set<V, M, Container>;

		consequent() = delete;

		/**
		* Constructs a fuzzy consequent that will aggregate the output of multiple fuzzy rules to the supplied set, using the supplied aggregator function.
		* @param set The output consequent set for multiple mapping rules.
		* @param func The function to use to aggregate outputs from individual mapping rules.
		*/
		constexpr explicit consequent(AggregatorFunc func) : func_(func) {}

		constexpr void aggregate(set_type const&);
		constexpr operator set_type ();

	private:
		set_type set_;
		AggregatorFunc func_;
		bool dirty_ = false;
	};

	/**
	* Template deduction guid for consequent.
	*/
	template <class V, class M, template <typename T, typename Alloc = std::allocator<T>> class Container, class AggregatorFunc = fuzzy::maximum<M>>
	requires fuzzy::numeric<V> && std::floating_point<M>
	consequent(basic_set<V, M, Container> const&, AggregatorFunc) -> consequent<V, M, Container, AggregatorFunc>;

	/**
	* Aggregates the specified input to the consequent set.
	* @param input The input set  to aggregate (oputput from mapping_rule.)
	*/
	template <class V, class M, template <typename T, typename Alloc = std::allocator<T>> class Container, class AggregatorFunc>
	requires fuzzy::numeric<V> && std::floating_point<M>
	constexpr void consequent<V, M, Container, AggregatorFunc>::aggregate(set_type const& input)
	{
		using element_t = typename set_type::element_type;
		using pair_t = std::pair<element_t, element_t>;

		set_type result;
		detail::set_operation_value_sequence<V, M, Container> seq{ set_, input };
		for (pair_t const& pair : seq)
		{
			result.insert(element_t{ pair.first.value(), func_(pair.first.membership(), pair.second.membership()) });
		}
		set_.swap(result);
		dirty_ = true;
	}

	/**
	* Retrieves the underlying consequent fuzzy set via an implicit conversion operator.
	*/
	template <class V, class M, template <typename T, typename Alloc = std::allocator<T>> class Container, class AggregatorFunc>
	requires fuzzy::numeric<V> && std::floating_point<M>
	constexpr consequent<V, M, Container, AggregatorFunc>::operator set_type ()
	{
		if (dirty_)
		{
			auto itr = std::max_element(begin(set_), end(set_), [](auto l, auto r) { return l.membership() < r.membership(); });
			if (itr != end(set_))
			{
				M const max = itr->membership();
				if (max > static_cast<M>(1))
				{
					for (auto& element : set_)
					{
						element.membership(element.membership() / max);
					}
				}
			}
			dirty_ = false;
		}

		return set_;
	}

	template <class M>
	using mamdani = Tconorm_converter<fuzzy::maximum<M>>;

	template <class M>
	struct standard_additive_model
	{
		using membership_type = M;

		constexpr standard_additive_model() = default;
		constexpr standard_additive_model(M) {}
		[[nodiscard]] constexpr membership_type operator()(membership_type a, membership_type b) const noexcept
		{
			return a + b;
		}
	};



	template <class M>
	requires std::floating_point<M>
	struct additive
	{
		constexpr additive() = default;
		constexpr M operator()(M a, M b)
		{
			return a + b;
		}
	};

}


#endif // FUZZY_CONSEQUENT_HPP