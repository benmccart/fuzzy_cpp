//  Copyright (c) 2025, Ben McCart
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.

#include <memory>
#include <vector>
#include <fuzzy/concepts.hpp>
#include <fuzzy/fwd.hpp>
#include <fuzzy/set.hpp>

#ifndef FUZZY_CONSEQUENT_HPP
#define FUZZY_CONSEQUENT_HPP

namespace fuzzy
{
	/**
	 * @brief Wraps together a fuzzy result with a target set as the consequent for a fuzzy mapping rule.
 	 * @tparam V The element value type.
	 * @tparam M The element membership type.
	 * @tparam AggregatorFunc The aggregator function which defines the aggregator behavior.
	 * @tparam Container The set container type.
	*/
	template <class V, class M, template <typename> class AggregatorFunc, template <typename T, typename Alloc = std::allocator<T>> class Container = std::vector, class Allocator = std::allocator<fuzzy::basic_element<V,M>>>
	requires fuzzy::numeric<V> && std::floating_point<M>
	class consequent
	{
	public:
		using aggregator_type = result_aggregator<V, M, AggregatorFunc, Container, Allocator>;
		using set_type = basic_set<V, M, Container, Allocator>;
		using self_type = consequent<V, M, AggregatorFunc, Container, Allocator>;

		/**
		* Constructs a fuzzy consequent that will aggregate the output of multiple fuzzy rules to the supplied set, using the supplied consequent function.
		* @param set The output consequent set for multiple mapping rules.
		* @param func The function to use to aggregate outputs from individual mapping rules.
		*/
		consequent() = delete;
		consequent(aggregator_type&& aggregator, set_type&& target) = delete;
		consequent(aggregator_type& aggregator, set_type&& target) = delete;
		consequent(aggregator_type&& aggregator, set_type const& target) = delete;
		consequent(self_type const&) = delete;
		consequent(self_type&&) = delete;
		self_type& operator=(self_type const&) = delete;
		self_type& operator=(self_type&&) = delete;

		constexpr set_type const& target() const noexcept         { return *target_;     }
		constexpr aggregator_type& aggregator() const noexcept    { return *aggregator_; }

	private:

		constexpr consequent(aggregator_type& aggregator, set_type const& target) noexcept : aggregator_(&aggregator), target_(&target) {}

		template <class V2, class M2, template <typename> class AggregatorFunc2, template <typename T2, typename Alloc2 = std::allocator<T2>> class Container2, class Allocator2>
		requires fuzzy::numeric<V2>&& std::floating_point<M2>
		friend class result_aggregator;

		aggregator_type *aggregator_;
		set_type const *target_;
	};


}


#endif // FUZZY_CONSEQUENT_HPP