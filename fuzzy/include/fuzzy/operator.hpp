//  Copyright (c) 2025, Ben McCart
//  Boost Software License - Version 1.0 - August 17th, 2003
//
//  Permission is hereby granted, free of charge, to any person or organization
//  obtaining a copy of the software and accompanying documentation covered by
//  this license (the "Software") to use, reproduce, display, distribute,
//  execute, and transmit the Software, and to prepare derivative works of the
//  Software, and to permit third-parties to whom the Software is furnished to
//  do so, all subject to the following:
//
//  The copyright notices in the Software and this entire statement, including
//  the above license grant, this restriction and the following disclaimer,
//  must be included in all copies of the Software, in whole or in part, and
//  all derivative works of the Software, unless such copies or derivative
//  works are solely in the form of machine-executable object code generated by
//  a source language processor.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
//  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.

#ifndef FUZZY_OPERATORS_HPP
#define FUZZY_OPERATORS_HPP

#include <algorithm>
#include <cassert>
#include <stdexcept>
#include <limits>
#include <type_traits>

#include <fuzzy/concepts.hpp>
#include <fuzzy/traits.hpp>

namespace fuzzy 
{
	// Used to assert (inant evaluation, or debug context) that membership is within a valid range.
	template <typename M>
	requires std::floating_point<M>
	constexpr void validate_range(M m) noexcept
	{
		if (std::is_constant_evaluated())
		{
			if (m < static_cast<M>(0) || static_cast<M>(1) < m)
				std::terminate();
		}
		else
		{
			assert(static_cast<M>(0) <= m && m <= static_cast<M>(1));
		}
	}

	// Used to assert (inant evaluation, or debug context) that membership is within a valid range.
	template <typename M>
	requires std::floating_point<M>
	constexpr void validate_range(M x, M y) noexcept
	{
		validate_range<M>(x);
		validate_range<M>(y);
	}

	// Triangular norm function object.
	template <typename M = float>
	requires std::floating_point<M>
	struct algabraic_product
	{
		using tnorm = tnorm_tag;
		using value_type = M;

		// Triangular norm of the form t(x,y) = x * y
		// @param x The left hand side operand  in the range [0,1].
		// @param y The right hand side operand in the range [0,1].
		// @result a value inn the range [0,1].
		[[nodiscard]] constexpr static M apply(M x, M y) noexcept
		{
			validate_range<M>(x, y);
	        return x * y;
		}
	};

	// Triangular conorm function object.
	template <typename M = float>
	requires std::floating_point<M>
	struct algabraic_sum
	{
		using tconorm = tconorm_tag;
		using value_type = M;

		// Triangular conorm of the form t(x,y) = x + y - x * y
		// @param x The left hand side operand in the range [0,1].
		// @param y The right hand side operand in the range  [0,1].
		// @result a value in the range [0,1]
		[[nodiscard]] constexpr static M apply(M x, M y) noexcept
		{
			validate_range<M>(x, y);
			return (x + y) - (x * y);
		}
	};

	// Triangular norm function object.
	template <typename M = float>
	requires std::floating_point<M>
	struct bounded_difference
	{
		using tnorm = tnorm_tag;
		using value_type = M;

		// Triangular norm of the form t(x,y) = max(0, x + y - 1)
		// @param x The left hand side operand in the range [0,1].
		// @param y The right hand side operand in the range [0,1].
		// @result a value in the range [0,1]
		[[nodiscard]] constexpr static M apply(M x, M y) noexcept
		{
			validate_range<M>(x, y);
			return std::max(static_cast<M>(0), (x + y) - static_cast<M>(1));
		}
	};

	// Triangular conorm function object.
	template <typename M = float>
	requires std::floating_point<M>
	struct bounded_sum
	{
		using tconorm = tconorm_tag;
		using value_type = M;

		/// Triangular conorm of the form t(x,y) = min(1, x + y)
		/// @param x The left hand side operand in the range [0,1].
		/// @param y The right hand side operand in the range [0,1].
		/// @result A value in the range [0,1].
		[[nodiscard]] constexpr static M apply(M x, M y) noexcept
		{
			validate_range<M>(x, y);
			return std::min(static_cast<M>(1), x + y);
		}
	};

	// Triangular norm function object.
	template <typename M = float>
	requires std::floating_point<M>
	struct drastic_product
	{
		using tnorm = tnorm_tag;
		using value_type = M;

		// Triangular norm of the form t(x,y) = min(x,y) if (max(x,y) == 1), 0 if x < 1 && y < 1
		// @param x The left hand side operand in the range [0,1].
		// @param y The right hand side operand in the range [0,1].
		// @result A value in the range [0,1].
		[[nodiscard]] constexpr static M apply(M x, M y) noexcept
		{
			validate_range<M>(x, y);
			return (x == static_cast<M>(1) || y == static_cast<M>(1)) ? std::min(x, y) : static_cast<M>(0);
		}
	};

	// Triangular conorm function object.
	template <typename M = float>
	requires std::floating_point<M>
	struct drastic_sum
	{
		using tconorm = tconorm_tag;
		using value_type = M;

		// Triangular conorm of the form t(x,y) = max(x,y) if (min(x,y) = 0), 1 if x | y > 0
		// @param x The left hand side operand in the range [0,1].
		// @param y The right hand side operand in the range [0,1].
		// @result A value in the range [0,1].
		[[nodiscard]] constexpr static M apply(M x, M y) noexcept
		{
			validate_range<M>(x, y);
			return (x == static_cast<M>(0) || y == static_cast<M>(0)) ? std::max(x, y) : static_cast<M>(1);
		}
	};

	
	// Triangular norm function object.
	template <typename M = float>
	requires std::floating_point<M>
	struct einstein_product
	{
		using tnorm = tnorm_tag;
		using value_type = M;

		// Triangular norm of the form t(x,y) = x * y / (2 - [x + y - (x * y)])
		// @param x The left hand side operand in the range [0,1].
		// @param y The right hand side operand in the range [0,1].
		// @result A value in the range [0,1].
		[[nodiscard]] constexpr static M apply(M x, M y) noexcept
		{
			validate_range<M>(x, y);
			return (x * y) / (static_cast<M>(2) - ((x + y) - (x * y)));
		}
	};


	// Triangular conorm function object.
	template <typename M = float>
	requires std::floating_point<M>
	struct einstein_sum
	{
		using tconorm = tconorm_tag;
		using value_type = M;

		// Triangular conorm of the form t(x,y) = x + y / [1 + x * y]
		// @param x The left hand side operand in the range [0,1].
		// @param y The right hand side operand in the range [0,1].
		// @result A value in the range [0,1].
		[[nodiscard]] constexpr static M apply(M x, M y) noexcept
		{
			validate_range<M>(x, y);
			return (x + y) / (static_cast<M>(1) + (x * y));
		}
	};

	// Triangular norm function object.
	template <typename M = float>
	requires std::floating_point<M>
	struct hamacher_product
	{
		using tnorm = tnorm_tag;
		using value_type = M;

		// Triangular norm of the form t(x,y) = (x * y) / [x + y - (x * y)]
		// @param lhs The left hand side operand in the range [0,1].
		// @param rhs The right hand side operand in the range [0,1].
		// @result A value in the range [0,1].
		[[nodiscard]] constexpr static M apply(M x, M y) noexcept
		{
			validate_range<M>(x, y);
			return ((x + y) - (x * y) == static_cast<M>(0)) ? static_cast<M>(0) : ((x * y) / ((x + y) - (x * y)));
		}
	};

	// Triangular conorm function object.
	template <typename M = float>
	requires std::floating_point<M>
	struct hamacher_sum
	{
		using tconorm = tconorm_tag;
		using value_type = M;

		// Triangular conorm of the form t(x,y) = [x + y - 2xy] / [1 - (x * y)]
		// @param x The left hand side operand in the range [0,1].
		// @param y The right hand side operand in the range [0,1].
		// @result a value in the range [0,1].
		[[nodiscard]] constexpr static M apply(M x, M y) noexcept
		{
			validate_range<M>(x, y);
			return (static_cast<M>(1) - (x * y) == static_cast<M>(0)) ? static_cast<M>(1) : (((x + y) - (static_cast<M>(2) * x * y)) / (static_cast<M>(1) - (x * y)));
		}
	};

	// Triangular norm function object.
	template <typename M = float>
	requires std::floating_point<M>
	struct minimum
	{
		using tnorm = tnorm_tag;
		using value_type = M;

		// Triangular norm of the form t(x,y) = min(x,y)
		// @param x The left hand side operand in the range [0,1].
		// @param y The right hand side operand in the range [0,1].
		// @result a value in the range [0,1].
		[[nodiscard]] constexpr static M apply(M x, M y) noexcept
		{
			validate_range<M>(x, y);
			return std::min(x, y);
		}
	};

	// Triangular conorm function object.
	template <typename M = float>
	requires std::floating_point<M>
	struct maximum
	{
		using tconorm = tconorm_tag;
		using value_type = M;

		// Triangular conorm of the form t(x,y) = max(x,y)
		// @param x The left hand side operand in the range [0,1].
		// @param y The right hand side operand in the range [0,1].
		// @result a value in the range [0,1].
		[[nodiscard]] constexpr static M apply(M x, M y) noexcept
		{
			validate_range<M>(x, y);
			return std::max(x, y);
		}
	};

	// Complement function object.
	template <typename M = float>
	requires std::floating_point<M>
	struct complement
	{
		using value_type = M;

		// Complement as 1 - m.
		// @param m Membership in the range [0,1].
		// @result a value in the range [0,1].
		[[nodiscard]] constexpr static M apply(M m) noexcept
		{
			validate_range<M>(m);
			return static_cast<M>(1.0) - m;
		}
	};


}

#endif // FUZZY_OPERATORS_HPP
